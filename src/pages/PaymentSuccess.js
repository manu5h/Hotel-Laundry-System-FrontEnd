import React, { useEffect } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { API_ENDPOINT } from "../config";
import jsPDF from "jspdf";

const PaymentSuccess = () => {
    const location = useLocation();
    const navigate = useNavigate();

    useEffect(() => {
        const params = new URLSearchParams(location.search);
        const sessionId = params.get("session_id");
        const orderId = localStorage.getItem("orderID");

        if (orderId) {
            handleAccept(orderId);
        }
    }, [location]);

    const handleAccept = async (orderId) => {
        const storedToken = localStorage.getItem("token");
        const hotelId = localStorage.getItem("userID");

        const apiUrl = API_ENDPOINT.CONFIRM_order_hotel.replace(":hotel_id", hotelId).replace(":order_id", orderId);

        try {
            const response = await fetch(apiUrl, {
                method: "POST",
                headers: {
                    Authorization: `Bearer ${storedToken}`,
                    "Content-Type": "application/json",
                },
            });

            if (!response.ok) throw new Error("Failed to accept order");

           
        } catch (error) {
            console.error("Error accepting order:", error);
        }
    };

    const handleDownloadReceipt = () => {
        const orderId = localStorage.getItem("orderID");
        const paymentAmount = localStorage.getItem("paymentAmount");
        const paymentDate = new Date().toLocaleString();
    
        // Create a new jsPDF instance
        const doc = new jsPDF();
    
        // Add a border
        doc.setLineWidth(0.5);
        doc.setDrawColor(0, 0, 0);
        doc.rect(10, 10, 190, 277);
    
        // Add a header
        doc.setFillColor(220, 220, 220); // Light gray background
        doc.rect(10, 10, 190, 30, "F");
        doc.setFontSize(20);
        doc.setTextColor(40, 40, 40);
        doc.setFont("helvetica", "bold");
        doc.text("LaundroMate Payment Receipt", 105, 25, { align: "center" });
    
        // Add a separator line
        doc.setDrawColor(150, 150, 150);
        doc.line(10, 40, 200, 40);
    
        // Add content
        doc.setFontSize(14);
        doc.setFont("helvetica", "normal");
        doc.setTextColor(0, 0, 0);
    
        doc.text(`Order ID: ${orderId}`, 20, 60);
        doc.text(`Payment Amount: LKR ${paymentAmount}`, 20, 75);
        doc.text(`Payment Date: ${paymentDate}`, 20, 90);
        doc.text(`Payment Method: STRIPE`, 20, 105);
        doc.text(`Payment Status: Successful`, 20, 120);
    
        // Add a thank you note
        doc.setFont("helvetica", "bold");
        doc.setTextColor(40, 80, 200); // Blue text color
        doc.setFontSize(16);
        doc.text("Thank you for your payment!", 20, 150);
    
        // Add footer
        doc.setFontSize(10);
        doc.setFont("helvetica", "italic");
        doc.setTextColor(100, 100, 100);
        doc.text("Generated by LaundroMate Â© 2024", 105, 290, { align: "center" });
    
        // Save the PDF
        doc.save("Payment receipt.pdf");
    };
    

    const handleNavigate = () => {
        localStorage.removeItem("orderID");
        localStorage.removeItem("paymentAmount");
        navigate("/PendingPayment", { replace: true });
    };

    return (
        <div style={{ display: "grid", justifyContent: "center", alignContent: "center", height: "80vh" }}>
            <h1 style={{ textAlign: "center", color: "green", margin: "0" }}>Payment Successfully!</h1>
            <p>Your payment has been processed successfully.</p>
            <button style={{ width: "380px", margin: "10px 0" }} onClick={handleDownloadReceipt}>
                Download Receipt
            </button>
            <button style={{ width: "380px" }} onClick={handleNavigate}>
                Go Back to Website
            </button>
        </div>
    );
};

export default PaymentSuccess;
